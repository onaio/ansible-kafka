############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
{% for url in kafka_hosts.split(',') %}
  {%- set url_host = url.split(':')[0] -%}
  {%- if url_host == ansible_fqdn or url_host in ansible_all_ipv4_addresses
         or ( kafka_id is defined and loop.index0 == kafka_id | int ) -%}
broker.id={{ loop.index0 }}

# Listeners: Listener List - Comma-separated list of URIs we will listen on and the
# listener names. If the listener name is not a security protocol,
# listener.security.protocol.map must also be set. Specify hostname as 0.0.0.0 to bind
# to all interfaces. Leave hostname empty to bind to default interface. Examples of
# legal listener lists: PLAINTEXT://myhost:9092,SSL://:9091
# CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093
{% if kafka_listeners is defined %}
listeners={{ kafka_listeners }}
{% else %}
#listeners=localhost
{% endif %}

# Advertised listeners: Listeners to publish to ZooKeeper for clients to use, if
# different than the listeners above. In IÎ»S environments, this may need to be
# different from the interface to which the broker binds. If this is not set, the
# value for `listeners` will be used.
{% if kafka_advertised_listeners is defined %}
advertised.listeners={{ kafka_advertised_listeners }}
{% else %}
#advertised.listeners=localhost
{% endif %}

# Name of listener used for communication between brokers. If this is unset, the 
# listener name is defined by security.inter.broker.protocol. It is an error to set
# this and security.inter.broker.protocol properties at the same time.
{% if kafka_inter_broker_listener_name is defined %}
inter.broker.listener.name={{ kafka_inter_broker_listener_name }}
{% else %}
#inter.broker.listener.name=
{% endif %}

# Map between listener names and security protocols. This must be defined for the same 
# security protocol to be usable in more than one port or IP. For example, internal and
# external traffic can be separated even if SSL is required for both. Concretely, the 
# user could define listeners with names INTERNAL and EXTERNAL and this property as: 
# `INTERNAL:SSL,EXTERNAL:SSL`. As shown, key and value are separated by a colon and map
# entries are separated by commas. Each listener name should only appear once in the map. 
#
# Different security (SSL and SASL) settings can be configured for each listener by 
# adding a normalised prefix (the listener name is lowercased) to the config name. For 
# example, to set a different keystore for the INTERNAL listener, a config with name 
# listener.name.internal.ssl.keystore.location would be set. If the config for the 
# listener name is not set, the config will fallback to the generic config 
# (i.e. ssl.keystore.location).
{% if kafka_listener_security_protocol_map is defined %}
listener.security.protocol.map={{ kafka_listener_security_protocol_map }}
{% else %}
#listener.security.protocol.map=
{% endif %}

############################# Socket Server Settings #############################

# The port the socket server listens on
port={{ url.split(':')[1] }}
  {% endif %}
{% endfor %}

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
{% if kafka_listen_address is defined %}
host.name={{ kafka_listen_address }}
{% else %}
#host.name=localhost
{% endif %}

# Hostname the broker will advertise to producers and consumers. If not set, it uses the
# value for "host.name" if configured.  Otherwise, it will use the value returned from
# java.net.InetAddress.getCanonicalHostName().
#advertised.host.name=<hostname routable by clients>

# The port to publish to ZooKeeper for clients to use. If this is not set,
# it will publish the same port that the broker binds to.
#advertised.port=<port accessible by clients>

# The number of threads handling network requests
num.network.threads={{ kafka_num_network_threads }}

# The number of threads doing disk I/O
num.io.threads={{ kafka_num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ kafka_socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ kafka_socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ kafka_socket_request_max_bytes }}


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={{ kafka_data_dir }}

# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions={{ kafka_num_partitions }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{ kafka_num_recovery_thread }}

############################# Internal Topic Settings  #############################

# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor={{ kafka_offsets_topic_replication_factor }}
transaction.state.log.replication.factor={{ kafka_transaction_state_log_replication_factor }}
transaction.state.log.min.isr={{ kafka_transaction_state_log_min_isr }}

auto.create.topics.enable={{ kafka_auto_create_topics }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages={{ kafka_log_flush_interval_messages }}

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms={{ kafka_log_flush_interval_ms }}

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ kafka_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
log.retention.bytes={{ kafka_log_retention_bytes }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{ kafka_log_retention_check_interval }}

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable={{ kafka_log_cleaner_enable }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ zookeeper_hosts }}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ zookeeper_connection_timeout_ms }}

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
group.initial.rebalance.delay.ms={{ kafka_group_initial_rebalance_delay }}
